/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     STM32L0x1.h
 * @brief    CMSIS HeaderFile
 * @version  1.3
 * @date     27. October 2018
 * @note     Generated by SVDConv V3.2.66 on Saturday, 27.10.2018 15:13:16
 *           from File 'STM32L0x1.svd',
 *           last modified on Monday, 25.09.2017 10:57:42
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup STM32L0x1
  * @{
  */


#ifndef STM32L0X1_H
#define STM32L0X1_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0+ Specific Interrupt Numbers  ======================================= */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  STM32L0x1 Specific Interrupt Numbers  ========================================== */
  WWDG_IRQn                 =   0,              /*!< 0  Window Watchdog interrupt                                              */
  PVD_IRQn                  =   1,              /*!< 1  PVD through EXTI line detection                                        */
  RTC_IRQn                  =   2,              /*!< 2  RTC global interrupt                                                   */
  FLASH_IRQn                =   3,              /*!< 3  Flash global interrupt                                                 */
  RCC_IRQn                  =   4,              /*!< 4  RCC global interrupt                                                   */
  EXTI0_1_IRQn              =   5,              /*!< 5  EXTI Line[1:0] interrupts                                              */
  EXTI2_3_IRQn              =   6,              /*!< 6  EXTI Line[3:2] interrupts                                              */
  EXTI4_15_IRQn             =   7,              /*!< 7  EXTI Line15 and EXTI4 interrupts                                       */
  DMA1_Channel1_IRQn        =   9,              /*!< 9  DMA1 Channel1 global interrupt                                         */
  DMA1_Channel2_3_IRQn      =  10,              /*!< 10 DMA1 Channel2 and 3 interrupts                                         */
  DMA1_Channel4_7_IRQn      =  11,              /*!< 11 DMA1 Channel4 to 7 interrupts                                          */
  ADC_COMP_IRQn             =  12,              /*!< 12 ADC and comparator 1 and 2                                             */
  LPTIM1_IRQn               =  13,              /*!< 13 LPTIMER1 interrupt through EXTI29                                      */
  USART4_USART5_IRQn        =  14,              /*!< 14 USART4/USART5 global interrupt                                         */
  TIM2_IRQn                 =  15,              /*!< 15 TIM2 global interrupt                                                  */
  TIM3_IRQn                 =  16,              /*!< 16 TIM3 global interrupt                                                  */
  TIM6_IRQn                 =  17,              /*!< 17 TIM6 global interrupt and DAC                                          */
  TIM7_IRQn                 =  18,              /*!< 18 TIM7 global interrupt and DAC                                          */
  TIM21_IRQn                =  20,              /*!< 20 TIMER21 global interrupt                                               */
  I2C3_IRQn                 =  21,              /*!< 21 I2C3 global interrupt                                                  */
  TIM22_IRQn                =  22,              /*!< 22 TIMER22 global interrupt                                               */
  I2C1_IRQn                 =  23,              /*!< 23 I2C1 global interrupt                                                  */
  I2C2_IRQn                 =  24,              /*!< 24 I2C2 global interrupt                                                  */
  SPI1_IRQn                 =  25,              /*!< 25 SPI1_global_interrupt                                                  */
  SPI2_IRQn                 =  26,              /*!< 26 SPI2 global interrupt                                                  */
  USART1_IRQn               =  27,              /*!< 27 USART1 global interrupt                                                */
  USART2_IRQn               =  28,              /*!< 28 USART2 global interrupt                                                */
  AES_RNG_LPUART1_IRQn      =  29               /*!< 29 AES global interrupt RNG global interrupt and LPUART1 global
                                                     interrupt through                                                         */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-M0+ Processor and Core Peripherals  =========================== */
#define __CM0+_REV                 0x0000U      /*!< CM0+ Core Revision                                                        */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 0        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0+.h"                          /*!< ARM Cortex-M0+ processor and core peripherals                             */
#include "system_STM32L0x1.h"                   /*!< STM32L0x1 System                                                          */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                            AES                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced encryption standard hardware  accelerator (AES)
  */

typedef struct {                                /*!< (@ 0x40026000) AES Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) control register                                           */
  __IM  uint32_t  SR;                           /*!< (@ 0x00000004) status register                                            */
  __IOM uint32_t  DINR;                         /*!< (@ 0x00000008) data input register                                        */
  __IM  uint32_t  DOUTR;                        /*!< (@ 0x0000000C) data output register                                       */
  __IOM uint32_t  KEYR0;                        /*!< (@ 0x00000010) key register 0                                             */
  __IOM uint32_t  KEYR1;                        /*!< (@ 0x00000014) key register 1                                             */
  __IOM uint32_t  KEYR2;                        /*!< (@ 0x00000018) key register 2                                             */
  __IOM uint32_t  KEYR3;                        /*!< (@ 0x0000001C) key register 3                                             */
  __IOM uint32_t  IVR0;                         /*!< (@ 0x00000020) initialization vector register 0                           */
  __IOM uint32_t  IVR1;                         /*!< (@ 0x00000024) initialization vector register 1                           */
  __IOM uint32_t  IVR2;                         /*!< (@ 0x00000028) initialization vector register 2                           */
  __IOM uint32_t  IVR3;                         /*!< (@ 0x0000002C) initialization vector register 3                           */
} AES_Type;                                     /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                           DMA1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Direct memory access controller (DMA1)
  */

typedef struct {                                /*!< (@ 0x40020000) DMA1 Structure                                             */
  __IM  uint32_t  ISR;                          /*!< (@ 0x00000000) interrupt status register                                  */
  __OM  uint32_t  IFCR;                         /*!< (@ 0x00000004) interrupt flag clear register                              */
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000008) channel x configuration register                           */
  __IOM uint32_t  CNDTR1;                       /*!< (@ 0x0000000C) channel x number of data register                          */
  __IOM uint32_t  CPAR1;                        /*!< (@ 0x00000010) channel x peripheral address register                      */
  __IOM uint32_t  CMAR1;                        /*!< (@ 0x00000014) channel x memory address register                          */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR2;                         /*!< (@ 0x0000001C) channel x configuration register                           */
  __IOM uint32_t  CNDTR2;                       /*!< (@ 0x00000020) channel x number of data register                          */
  __IOM uint32_t  CPAR2;                        /*!< (@ 0x00000024) channel x peripheral address register                      */
  __IOM uint32_t  CMAR2;                        /*!< (@ 0x00000028) channel x memory address register                          */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCR3;                         /*!< (@ 0x00000030) channel x configuration register                           */
  __IOM uint32_t  CNDTR3;                       /*!< (@ 0x00000034) channel x number of data register                          */
  __IOM uint32_t  CPAR3;                        /*!< (@ 0x00000038) channel x peripheral address register                      */
  __IOM uint32_t  CMAR3;                        /*!< (@ 0x0000003C) channel x memory address register                          */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000044) channel x configuration register                           */
  __IOM uint32_t  CNDTR4;                       /*!< (@ 0x00000048) channel x number of data register                          */
  __IOM uint32_t  CPAR4;                        /*!< (@ 0x0000004C) channel x peripheral address register                      */
  __IOM uint32_t  CMAR4;                        /*!< (@ 0x00000050) channel x memory address register                          */
  __IM  uint32_t  RESERVED3;
  __IOM uint32_t  CCR5;                         /*!< (@ 0x00000058) channel x configuration register                           */
  __IOM uint32_t  CNDTR5;                       /*!< (@ 0x0000005C) channel x number of data register                          */
  __IOM uint32_t  CPAR5;                        /*!< (@ 0x00000060) channel x peripheral address register                      */
  __IOM uint32_t  CMAR5;                        /*!< (@ 0x00000064) channel x memory address register                          */
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  CCR6;                         /*!< (@ 0x0000006C) channel x configuration register                           */
  __IOM uint32_t  CNDTR6;                       /*!< (@ 0x00000070) channel x number of data register                          */
  __IOM uint32_t  CPAR6;                        /*!< (@ 0x00000074) channel x peripheral address register                      */
  __IOM uint32_t  CMAR6;                        /*!< (@ 0x00000078) channel x memory address register                          */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  CCR7;                         /*!< (@ 0x00000080) channel x configuration register                           */
  __IOM uint32_t  CNDTR7;                       /*!< (@ 0x00000084) channel x number of data register                          */
  __IOM uint32_t  CPAR7;                        /*!< (@ 0x00000088) channel x peripheral address register                      */
  __IOM uint32_t  CMAR7;                        /*!< (@ 0x0000008C) channel x memory address register                          */
  __IM  uint32_t  RESERVED6[6];
  __IOM uint32_t  CSELR;                        /*!< (@ 0x000000A8) channel selection register                                 */
} DMA1_Type;                                    /*!< Size = 172 (0xac)                                                         */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cyclic redundancy check calculation  unit (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure                                              */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000000) Data register                                              */
  __IOM uint32_t  IDR;                          /*!< (@ 0x00000004) Independent data register                                  */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000008) Control register                                           */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  INIT;                         /*!< (@ 0x00000010) Initial CRC value                                          */
  __IOM uint32_t  POL;                          /*!< (@ 0x00000014) polynomial                                                 */
} CRC_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOA                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOA)
  */

typedef struct {                                /*!< (@ 0x50000000) GPIOA Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __OM  uint32_t  BRR;                          /*!< (@ 0x00000028) GPIO port bit reset register                               */
} GPIOA_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           GPIOB                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose I/Os (GPIOB)
  */

typedef struct {                                /*!< (@ 0x50000400) GPIOB Structure                                            */
  __IOM uint32_t  MODER;                        /*!< (@ 0x00000000) GPIO port mode register                                    */
  __IOM uint32_t  OTYPER;                       /*!< (@ 0x00000004) GPIO port output type register                             */
  __IOM uint32_t  OSPEEDR;                      /*!< (@ 0x00000008) GPIO port output speed register                            */
  __IOM uint32_t  PUPDR;                        /*!< (@ 0x0000000C) GPIO port pull-up/pull-down register                       */
  __IM  uint32_t  IDR;                          /*!< (@ 0x00000010) GPIO port input data register                              */
  __IOM uint32_t  ODR;                          /*!< (@ 0x00000014) GPIO port output data register                             */
  __OM  uint32_t  BSRR;                         /*!< (@ 0x00000018) GPIO port bit set/reset register                           */
  __IOM uint32_t  LCKR;                         /*!< (@ 0x0000001C) GPIO port configuration lock register                      */
  __IOM uint32_t  AFRL;                         /*!< (@ 0x00000020) GPIO alternate function low register                       */
  __IOM uint32_t  AFRH;                         /*!< (@ 0x00000024) GPIO alternate function high register                      */
  __OM  uint32_t  BRR;                          /*!< (@ 0x00000028) GPIO port bit reset register                               */
} GPIOB_Type;                                   /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           LPTIM                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Low power timer (LPTIM)
  */

typedef struct {                                /*!< (@ 0x40007C00) LPTIM Structure                                            */
  __IM  uint32_t  ISR;                          /*!< (@ 0x00000000) Interrupt and Status Register                              */
  __OM  uint32_t  ICR;                          /*!< (@ 0x00000004) Interrupt Clear Register                                   */
  __IOM uint32_t  IER;                          /*!< (@ 0x00000008) Interrupt Enable Register                                  */
  __IOM uint32_t  CFGR;                         /*!< (@ 0x0000000C) Configuration Register                                     */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000010) Control Register                                           */
  __IOM uint32_t  CMP;                          /*!< (@ 0x00000014) Compare Register                                           */
  __IOM uint32_t  ARR;                          /*!< (@ 0x00000018) Autoreload Register                                        */
  __IM  uint32_t  CNT;                          /*!< (@ 0x0000001C) Counter Register                                           */
} LPTIM_Type;                                   /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real-time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure                                              */
  __IOM uint32_t  TR;                           /*!< (@ 0x00000000) RTC time register                                          */
  __IOM uint32_t  DR;                           /*!< (@ 0x00000004) RTC date register                                          */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000008) RTC control register                                       */
  __IOM uint32_t  ISR;                          /*!< (@ 0x0000000C) RTC initialization and status register                     */
  __IOM uint32_t  PRER;                         /*!< (@ 0x00000010) RTC prescaler register                                     */
  __IOM uint32_t  WUTR;                         /*!< (@ 0x00000014) RTC wakeup timer register                                  */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  ALRMAR;                       /*!< (@ 0x0000001C) RTC alarm A register                                       */
  __IOM uint32_t  ALRMBR;                       /*!< (@ 0x00000020) RTC alarm B register                                       */
  __OM  uint32_t  WPR;                          /*!< (@ 0x00000024) write protection register                                  */
  __IM  uint32_t  SSR;                          /*!< (@ 0x00000028) RTC sub second register                                    */
  __OM  uint32_t  SHIFTR;                       /*!< (@ 0x0000002C) RTC shift control register                                 */
  __IM  uint32_t  TSTR;                         /*!< (@ 0x00000030) RTC timestamp time register                                */
  __IM  uint32_t  TSDR;                         /*!< (@ 0x00000034) RTC timestamp date register                                */
  __IM  uint32_t  TSSSR;                        /*!< (@ 0x00000038) RTC time-stamp sub second register                         */
  __IOM uint32_t  CALR;                         /*!< (@ 0x0000003C) RTC calibration register                                   */
  __IOM uint32_t  TAMPCR;                       /*!< (@ 0x00000040) RTC tamper configuration register                          */
  __IOM uint32_t  ALRMASSR;                     /*!< (@ 0x00000044) RTC alarm A sub second register                            */
  __IOM uint32_t  ALRMBSSR;                     /*!< (@ 0x00000048) RTC alarm B sub second register                            */
  __IOM uint32_t  OR;                           /*!< (@ 0x0000004C) option register                                            */
  __IOM uint32_t  BKP0R;                        /*!< (@ 0x00000050) RTC backup registers                                       */
  __IOM uint32_t  BKP1R;                        /*!< (@ 0x00000054) RTC backup registers                                       */
  __IOM uint32_t  BKP2R;                        /*!< (@ 0x00000058) RTC backup registers                                       */
  __IOM uint32_t  BKP3R;                        /*!< (@ 0x0000005C) RTC backup registers                                       */
  __IOM uint32_t  BKP4R;                        /*!< (@ 0x00000060) RTC backup registers                                       */
} RTC_Type;                                     /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                          USART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver  transmitter (USART1)
  */

typedef struct {                                /*!< (@ 0x40013800) USART1 Structure                                           */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) Control register 2                                         */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000008) Control register 3                                         */
  __IOM uint32_t  BRR;                          /*!< (@ 0x0000000C) Baud rate register                                         */
  __IOM uint32_t  GTPR;                         /*!< (@ 0x00000010) Guard time and prescaler register                          */
  __IOM uint32_t  RTOR;                         /*!< (@ 0x00000014) Receiver timeout register                                  */
  __OM  uint32_t  RQR;                          /*!< (@ 0x00000018) Request register                                           */
  __IM  uint32_t  ISR;                          /*!< (@ 0x0000001C) Interrupt & status register                                */
  __OM  uint32_t  ICR;                          /*!< (@ 0x00000020) Interrupt flag clear register                              */
  __IM  uint32_t  RDR;                          /*!< (@ 0x00000024) Receive data register                                      */
  __IOM uint32_t  TDR;                          /*!< (@ 0x00000028) Transmit data register                                     */
} USART1_Type;                                  /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           IWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent watchdog (IWDG)
  */

typedef struct {                                /*!< (@ 0x40003000) IWDG Structure                                             */
  __OM  uint32_t  KR;                           /*!< (@ 0x00000000) Key register                                               */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000004) Prescaler register                                         */
  __IOM uint32_t  RLR;                          /*!< (@ 0x00000008) Reload register                                            */
  __IM  uint32_t  SR;                           /*!< (@ 0x0000000C) Status register                                            */
  __IOM uint32_t  WINR;                         /*!< (@ 0x00000010) Window register                                            */
} IWDG_Type;                                    /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           WWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System window watchdog (WWDG)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDG Structure                                             */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Control register                                           */
  __IOM uint32_t  CFR;                          /*!< (@ 0x00000004) Configuration register                                     */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) Status register                                            */
} WWDG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                         Firewall                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Firewall (Firewall)
  */

typedef struct {                                /*!< (@ 0x40011C00) Firewall Structure                                         */
  __IOM uint32_t  FIREWALL_CSSA;                /*!< (@ 0x00000000) Code segment start address                                 */
  __IOM uint32_t  FIREWALL_CSL;                 /*!< (@ 0x00000004) Code segment length                                        */
  __IOM uint32_t  FIREWALL_NVDSSA;              /*!< (@ 0x00000008) Non-volatile data segment start address                    */
  __IOM uint32_t  FIREWALL_NVDSL;               /*!< (@ 0x0000000C) Non-volatile data segment length                           */
  __IOM uint32_t  FIREWALL_VDSSA;               /*!< (@ 0x00000010) Volatile data segment start address                        */
  __IOM uint32_t  FIREWALL_VDSL;                /*!< (@ 0x00000014) Volatile data segment length                               */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  FIREWALL_CR;                  /*!< (@ 0x00000020) Configuration register                                     */
} Firewall_Type;                                /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40021000) RCC Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) Clock control register                                     */
  __IOM uint32_t  ICSCR;                        /*!< (@ 0x00000004) Internal clock sources calibration register                */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CFGR;                         /*!< (@ 0x0000000C) Clock configuration register                               */
  __IM  uint32_t  CIER;                         /*!< (@ 0x00000010) Clock interrupt enable register                            */
  __IM  uint32_t  CIFR;                         /*!< (@ 0x00000014) Clock interrupt flag register                              */
  __IM  uint32_t  CICR;                         /*!< (@ 0x00000018) Clock interrupt clear register                             */
  __IOM uint32_t  IOPRSTR;                      /*!< (@ 0x0000001C) GPIO reset register                                        */
  __IOM uint32_t  AHBRSTR;                      /*!< (@ 0x00000020) AHB peripheral reset register                              */
  __IOM uint32_t  APB2RSTR;                     /*!< (@ 0x00000024) APB2 peripheral reset register                             */
  __IOM uint32_t  APB1RSTR;                     /*!< (@ 0x00000028) APB1 peripheral reset register                             */
  __IOM uint32_t  IOPENR;                       /*!< (@ 0x0000002C) GPIO clock enable register                                 */
  __IOM uint32_t  AHBENR;                       /*!< (@ 0x00000030) AHB peripheral clock enable register                       */
  __IOM uint32_t  APB2ENR;                      /*!< (@ 0x00000034) APB2 peripheral clock enable register                      */
  __IOM uint32_t  APB1ENR;                      /*!< (@ 0x00000038) APB1 peripheral clock enable register                      */
  __IOM uint32_t  IOPSMEN;                      /*!< (@ 0x0000003C) GPIO clock enable in sleep mode register                   */
  __IOM uint32_t  AHBSMENR;                     /*!< (@ 0x00000040) AHB peripheral clock enable in sleep mode register         */
  __IOM uint32_t  APB2SMENR;                    /*!< (@ 0x00000044) APB2 peripheral clock enable in sleep mode register        */
  __IOM uint32_t  APB1SMENR;                    /*!< (@ 0x00000048) APB1 peripheral clock enable in sleep mode register        */
  __IOM uint32_t  CCIPR;                        /*!< (@ 0x0000004C) Clock configuration register                               */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000050) Control and status register                                */
} RCC_Type;                                     /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                        SYSCFG_COMP                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief System configuration controller and COMP  register (SYSCFG_COMP)
  */

typedef struct {                                /*!< (@ 0x40010000) SYSCFG_COMP Structure                                      */
  __IOM uint32_t  CFGR1;                        /*!< (@ 0x00000000) SYSCFG configuration register 1                            */
  __IOM uint32_t  CFGR2;                        /*!< (@ 0x00000004) SYSCFG configuration register 2                            */
  __IOM uint32_t  EXTICR1;                      /*!< (@ 0x00000008) external interrupt configuration register 1                */
  __IOM uint32_t  EXTICR2;                      /*!< (@ 0x0000000C) external interrupt configuration register 2                */
  __IOM uint32_t  EXTICR3;                      /*!< (@ 0x00000010) external interrupt configuration register 3                */
  __IOM uint32_t  EXTICR4;                      /*!< (@ 0x00000014) external interrupt configuration register 4                */
  __IOM uint32_t  COMP1_CTRL;                   /*!< (@ 0x00000018) Comparator 1 control and status register                   */
  __IOM uint32_t  COMP2_CTRL;                   /*!< (@ 0x0000001C) Comparator 2 control and status register                   */
  __IOM uint32_t  CFGR3;                        /*!< (@ 0x00000020) SYSCFG configuration register 3                            */
} SYSCFG_COMP_Type;                             /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000008) status register                                            */
  __IOM uint32_t  DR;                           /*!< (@ 0x0000000C) data register                                              */
  __IOM uint32_t  CRCPR;                        /*!< (@ 0x00000010) CRC polynomial register                                    */
  __IM  uint32_t  RXCRCR;                       /*!< (@ 0x00000014) RX CRC register                                            */
  __IM  uint32_t  TXCRCR;                       /*!< (@ 0x00000018) TX CRC register                                            */
  __IOM uint32_t  I2SCFGR;                      /*!< (@ 0x0000001C) I2S configuration register                                 */
  __IOM uint32_t  I2SPR;                        /*!< (@ 0x00000020) I2S prescaler register                                     */
} SPI1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter-integrated circuit (I2C1)
  */

typedef struct {                                /*!< (@ 0x40005400) I2C1 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) Control register 2                                         */
  __IOM uint32_t  OAR1;                         /*!< (@ 0x00000008) Own address register 1                                     */
  __IOM uint32_t  OAR2;                         /*!< (@ 0x0000000C) Own address register 2                                     */
  __IOM uint32_t  TIMINGR;                      /*!< (@ 0x00000010) Timing register                                            */
  __IOM uint32_t  TIMEOUTR;                     /*!< (@ 0x00000014) Status register 1                                          */
  __IOM uint32_t  ISR;                          /*!< (@ 0x00000018) Interrupt and Status register                              */
  __OM  uint32_t  ICR;                          /*!< (@ 0x0000001C) Interrupt clear register                                   */
  __IM  uint32_t  PECR;                         /*!< (@ 0x00000020) PEC register                                               */
  __IM  uint32_t  RXDR;                         /*!< (@ 0x00000024) Receive data register                                      */
  __IOM uint32_t  TXDR;                         /*!< (@ 0x00000028) Transmit data register                                     */
} I2C1_Type;                                    /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40007000) PWR Structure                                              */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000000) power control register                                     */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000004) power control/status register                              */
} PWR_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           Flash                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash (Flash)
  */

typedef struct {                                /*!< (@ 0x40022000) Flash Structure                                            */
  __IOM uint32_t  ACR;                          /*!< (@ 0x00000000) Access control register                                    */
  __IOM uint32_t  PECR;                         /*!< (@ 0x00000004) Program/erase control register                             */
  __OM  uint32_t  PDKEYR;                       /*!< (@ 0x00000008) Power down key register                                    */
  __OM  uint32_t  PEKEYR;                       /*!< (@ 0x0000000C) Program/erase key register                                 */
  __OM  uint32_t  PRGKEYR;                      /*!< (@ 0x00000010) Program memory key register                                */
  __OM  uint32_t  OPTKEYR;                      /*!< (@ 0x00000014) Option byte key register                                   */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000018) Status register                                            */
  __IM  uint32_t  OBR;                          /*!< (@ 0x0000001C) Option byte register                                       */
  __IOM uint32_t  WRPR;                         /*!< (@ 0x00000020) Write protection register                                  */
} Flash_Type;                                   /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief External interrupt/event  controller (EXTI)
  */

typedef struct {                                /*!< (@ 0x40010400) EXTI Structure                                             */
  __IOM uint32_t  IMR;                          /*!< (@ 0x00000000) Interrupt mask register (EXTI_IMR)                         */
  __IOM uint32_t  EMR;                          /*!< (@ 0x00000004) Event mask register (EXTI_EMR)                             */
  __IOM uint32_t  RTSR;                         /*!< (@ 0x00000008) Rising Trigger selection register (EXTI_RTSR)              */
  __IOM uint32_t  FTSR;                         /*!< (@ 0x0000000C) Falling Trigger selection register (EXTI_FTSR)             */
  __IOM uint32_t  SWIER;                        /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIER)             */
  __IOM uint32_t  PR;                           /*!< (@ 0x00000014) Pending register (EXTI_PR)                                 */
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog-to-digital converter (ADC)
  */

typedef struct {                                /*!< (@ 0x40012400) ADC Structure                                              */
  __IOM uint32_t  ISR;                          /*!< (@ 0x00000000) interrupt and status register                              */
  __IOM uint32_t  IER;                          /*!< (@ 0x00000004) interrupt enable register                                  */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000008) control register                                           */
  __IOM uint32_t  CFGR1;                        /*!< (@ 0x0000000C) configuration register 1                                   */
  __IOM uint32_t  CFGR2;                        /*!< (@ 0x00000010) configuration register 2                                   */
  __IOM uint32_t  SMPR;                         /*!< (@ 0x00000014) sampling time register                                     */
  __IM  uint32_t  RESERVED[2];
  __IOM uint32_t  TR;                           /*!< (@ 0x00000020) watchdog threshold register                                */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CHSELR;                       /*!< (@ 0x00000028) channel selection register                                 */
  __IM  uint32_t  RESERVED2[5];
  __IM  uint32_t  DR;                           /*!< (@ 0x00000040) data register                                              */
  __IM  uint32_t  RESERVED3[28];
  __IOM uint32_t  CALFACT;                      /*!< (@ 0x000000B4) ADC Calibration factor                                     */
  __IM  uint32_t  RESERVED4[148];
  __IOM uint32_t  CCR;                          /*!< (@ 0x00000308) ADC common configuration register                          */
} ADC_Type;                                     /*!< Size = 780 (0x30c)                                                        */



/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBG)
  */

typedef struct {                                /*!< (@ 0x40015800) DBG Structure                                              */
  __IM  uint32_t  IDCODE;                       /*!< (@ 0x00000000) MCU Device ID Code Register                                */
  __IOM uint32_t  CR;                           /*!< (@ 0x00000004) Debug MCU Configuration Register                           */
  __IOM uint32_t  APB1_FZ;                      /*!< (@ 0x00000008) APB Low Freeze Register                                    */
  __IOM uint32_t  APB2_FZ;                      /*!< (@ 0x0000000C) APB High Freeze Register                                   */
} DBG_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM2)
  */

typedef struct {                                /*!< (@ 0x40000000) TIM2 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  
  union {
    __IOM uint32_t CCMR2_Output;                /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */
    __IOM uint32_t CCMR2_Input;                 /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */
  };
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IOM uint32_t  CCR3;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */
  __IOM uint32_t  CCR4;                         /*!< (@ 0x00000040) capture/compare register 4                                 */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  DCR;                          /*!< (@ 0x00000048) DMA control register                                       */
  __IOM uint32_t  DMAR;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */
  __IOM uint32_t  OR;                           /*!< (@ 0x00000050) TIM2 option register                                       */
} TIM2_Type;                                    /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM6                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic-timers (TIM6)
  */

typedef struct {                                /*!< (@ 0x40001000) TIM6 Structure                                             */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
} TIM6_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM21                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM21)
  */

typedef struct {                                /*!< (@ 0x40010800) TIM21 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IM  uint32_t  RESERVED2[5];
  __IOM uint32_t  OR;                           /*!< (@ 0x00000050) TIM21 option register                                      */
} TIM21_Type;                                   /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM22                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General-purpose-timers (TIM22)
  */

typedef struct {                                /*!< (@ 0x40011400) TIM22 Structure                                            */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) control register 2                                         */
  __IOM uint32_t  SMCR;                         /*!< (@ 0x00000008) slave mode control register                                */
  __IOM uint32_t  DIER;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */
  __IOM uint32_t  SR;                           /*!< (@ 0x00000010) status register                                            */
  __OM  uint32_t  EGR;                          /*!< (@ 0x00000014) event generation register                                  */
  
  union {
    __IOM uint32_t CCMR1_Output;                /*!< (@ 0x00000018) capture/compare mode register (output mode)                */
    __IOM uint32_t CCMR1_Input;                 /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */
  };
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  CCER;                         /*!< (@ 0x00000020) capture/compare enable register                            */
  __IOM uint32_t  CNT;                          /*!< (@ 0x00000024) counter                                                    */
  __IOM uint32_t  PSC;                          /*!< (@ 0x00000028) prescaler                                                  */
  __IOM uint32_t  ARR;                          /*!< (@ 0x0000002C) auto-reload register                                       */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CCR1;                         /*!< (@ 0x00000034) capture/compare register 1                                 */
  __IOM uint32_t  CCR2;                         /*!< (@ 0x00000038) capture/compare register 2                                 */
  __IM  uint32_t  RESERVED2[5];
  __IOM uint32_t  OR;                           /*!< (@ 0x00000050) TIM22 option register                                      */
} TIM22_Type;                                   /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                          LPUART1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Lower power Universal asynchronous receiver  transmitter (LPUART1)
  */

typedef struct {                                /*!< (@ 0x40004800) LPUART1 Structure                                          */
  __IOM uint32_t  CR1;                          /*!< (@ 0x00000000) Control register 1                                         */
  __IOM uint32_t  CR2;                          /*!< (@ 0x00000004) Control register 2                                         */
  __IOM uint32_t  CR3;                          /*!< (@ 0x00000008) Control register 3                                         */
  __IOM uint32_t  BRR;                          /*!< (@ 0x0000000C) Baud rate register                                         */
  __IM  uint32_t  RESERVED[2];
  __OM  uint32_t  RQR;                          /*!< (@ 0x00000018) Request register                                           */
  __IM  uint32_t  ISR;                          /*!< (@ 0x0000001C) Interrupt & status register                                */
  __OM  uint32_t  ICR;                          /*!< (@ 0x00000020) Interrupt flag clear register                              */
  __IM  uint32_t  RDR;                          /*!< (@ 0x00000024) Receive data register                                      */
  __IOM uint32_t  TDR;                          /*!< (@ 0x00000028) Transmit data register                                     */
} LPUART1_Type;                                 /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           NVIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested Vectored Interrupt  Controller (NVIC)
  */

typedef struct {                                /*!< (@ 0xE000E100) NVIC Structure                                             */
  __IOM uint32_t  ISER;                         /*!< (@ 0x00000000) Interrupt Set Enable Register                              */
  __IM  uint32_t  RESERVED[31];
  __IOM uint32_t  ICER;                         /*!< (@ 0x00000080) Interrupt Clear Enable Register                            */
  __IM  uint32_t  RESERVED1[31];
  __IOM uint32_t  ISPR;                         /*!< (@ 0x00000100) Interrupt Set-Pending Register                             */
  __IM  uint32_t  RESERVED2[31];
  __IOM uint32_t  ICPR;                         /*!< (@ 0x00000180) Interrupt Clear-Pending Register                           */
  __IM  uint32_t  RESERVED3[95];
  __IOM uint32_t  IPR0;                         /*!< (@ 0x00000300) Interrupt Priority Register 0                              */
  __IOM uint32_t  IPR1;                         /*!< (@ 0x00000304) Interrupt Priority Register 1                              */
  __IOM uint32_t  IPR2;                         /*!< (@ 0x00000308) Interrupt Priority Register 2                              */
  __IOM uint32_t  IPR3;                         /*!< (@ 0x0000030C) Interrupt Priority Register 3                              */
  __IOM uint32_t  IPR4;                         /*!< (@ 0x00000310) Interrupt Priority Register 4                              */
  __IOM uint32_t  IPR5;                         /*!< (@ 0x00000314) Interrupt Priority Register 5                              */
  __IOM uint32_t  IPR6;                         /*!< (@ 0x00000318) Interrupt Priority Register 6                              */
  __IOM uint32_t  IPR7;                         /*!< (@ 0x0000031C) Interrupt Priority Register 7                              */
} NVIC_Type;                                    /*!< Size = 800 (0x320)                                                        */



/* =========================================================================================================================== */
/* ================                                            MPU                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Memory protection unit (MPU)
  */

typedef struct {                                /*!< (@ 0xE000ED90) MPU Structure                                              */
  __IM  uint32_t  MPU_TYPER;                    /*!< (@ 0x00000000) MPU type register                                          */
  __IM  uint32_t  MPU_CTRL;                     /*!< (@ 0x00000004) MPU control register                                       */
  __IOM uint32_t  MPU_RNR;                      /*!< (@ 0x00000008) MPU region number register                                 */
  __IOM uint32_t  MPU_RBAR;                     /*!< (@ 0x0000000C) MPU region base address register                           */
  __IOM uint32_t  MPU_RASR;                     /*!< (@ 0x00000010) MPU region attribute and size register                     */
} MPU_Type;                                     /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                            STK                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief SysTick timer (STK)
  */

typedef struct {                                /*!< (@ 0xE000E010) STK Structure                                              */
  __IOM uint32_t  CSR;                          /*!< (@ 0x00000000) SysTick control and status register                        */
  __IOM uint32_t  RVR;                          /*!< (@ 0x00000004) SysTick reload value register                              */
  __IOM uint32_t  CVR;                          /*!< (@ 0x00000008) SysTick current value register                             */
  __IOM uint32_t  CALIB;                        /*!< (@ 0x0000000C) SysTick calibration value register                         */
} STK_Type;                                     /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                            SCB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief System control block (SCB)
  */

typedef struct {                                /*!< (@ 0xE000ED00) SCB Structure                                              */
  __IM  uint32_t  CPUID;                        /*!< (@ 0x00000000) CPUID base register                                        */
  __IOM uint32_t  ICSR;                         /*!< (@ 0x00000004) Interrupt control and state register                       */
  __IOM uint32_t  VTOR;                         /*!< (@ 0x00000008) Vector table offset register                               */
  __IOM uint32_t  AIRCR;                        /*!< (@ 0x0000000C) Application interrupt and reset control register           */
  __IOM uint32_t  SCR;                          /*!< (@ 0x00000010) System control register                                    */
  __IOM uint32_t  CCR;                          /*!< (@ 0x00000014) Configuration and control register                         */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  SHPR2;                        /*!< (@ 0x0000001C) System handler priority registers                          */
  __IOM uint32_t  SHPR3;                        /*!< (@ 0x00000020) System handler priority registers                          */
} SCB_Type;                                     /*!< Size = 36 (0x24)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define AES_BASE                    0x40026000UL
#define DMA1_BASE                   0x40020000UL
#define CRC_BASE                    0x40023000UL
#define GPIOA_BASE                  0x50000000UL
#define GPIOB_BASE                  0x50000400UL
#define GPIOC_BASE                  0x50000800UL
#define GPIOD_BASE                  0x50000C00UL
#define GPIOH_BASE                  0x50001C00UL
#define GPIOE_BASE                  0x50001000UL
#define LPTIM_BASE                  0x40007C00UL
#define RTC_BASE                    0x40002800UL
#define USART1_BASE                 0x40013800UL
#define USART2_BASE                 0x40004400UL
#define USART4_BASE                 0x40004C00UL
#define USART5_BASE                 0x40005000UL
#define IWDG_BASE                   0x40003000UL
#define WWDG_BASE                   0x40002C00UL
#define Firewall_BASE               0x40011C00UL
#define RCC_BASE                    0x40021000UL
#define SYSCFG_COMP_BASE            0x40010000UL
#define SPI1_BASE                   0x40013000UL
#define SPI2_BASE                   0x40003800UL
#define I2C1_BASE                   0x40005400UL
#define I2C2_BASE                   0x40005800UL
#define I2C3_BASE                   0x40007800UL
#define PWR_BASE                    0x40007000UL
#define Flash_BASE                  0x40022000UL
#define EXTI_BASE                   0x40010400UL
#define ADC_BASE                    0x40012400UL
#define DBG_BASE                    0x40015800UL
#define TIM2_BASE                   0x40000000UL
#define TIM3_BASE                   0x40000400UL
#define TIM6_BASE                   0x40001000UL
#define TIM7_BASE                   0x40001400UL
#define TIM21_BASE                  0x40010800UL
#define TIM22_BASE                  0x40011400UL
#define LPUART1_BASE                0x40004800UL
#define NVIC_BASE                   0xE000E100UL
#define MPU_BASE                    0xE000ED90UL
#define STK_BASE                    0xE000E010UL
#define SCB_BASE                    0xE000ED00UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define AES                         ((AES_Type*)               AES_BASE)
#define DMA1                        ((DMA1_Type*)              DMA1_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define GPIOB                       ((GPIOB_Type*)             GPIOB_BASE)
#define GPIOC                       ((GPIOB_Type*)             GPIOC_BASE)
#define GPIOD                       ((GPIOB_Type*)             GPIOD_BASE)
#define GPIOH                       ((GPIOB_Type*)             GPIOH_BASE)
#define GPIOE                       ((GPIOB_Type*)             GPIOE_BASE)
#define LPTIM                       ((LPTIM_Type*)             LPTIM_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define USART1                      ((USART1_Type*)            USART1_BASE)
#define USART2                      ((USART1_Type*)            USART2_BASE)
#define USART4                      ((USART1_Type*)            USART4_BASE)
#define USART5                      ((USART1_Type*)            USART5_BASE)
#define IWDG                        ((IWDG_Type*)              IWDG_BASE)
#define WWDG                        ((WWDG_Type*)              WWDG_BASE)
#define Firewall                    ((Firewall_Type*)          Firewall_BASE)
#define RCC                         ((RCC_Type*)               RCC_BASE)
#define SYSCFG_COMP                 ((SYSCFG_COMP_Type*)       SYSCFG_COMP_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI1_Type*)              SPI2_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define I2C2                        ((I2C1_Type*)              I2C2_BASE)
#define I2C3                        ((I2C1_Type*)              I2C3_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define Flash                       ((Flash_Type*)             Flash_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define ADC                         ((ADC_Type*)               ADC_BASE)
#define DBG                         ((DBG_Type*)               DBG_BASE)
#define TIM2                        ((TIM2_Type*)              TIM2_BASE)
#define TIM3                        ((TIM2_Type*)              TIM3_BASE)
#define TIM6                        ((TIM6_Type*)              TIM6_BASE)
#define TIM7                        ((TIM6_Type*)              TIM7_BASE)
#define TIM21                       ((TIM21_Type*)             TIM21_BASE)
#define TIM22                       ((TIM22_Type*)             TIM22_BASE)
#define LPUART1                     ((LPUART1_Type*)           LPUART1_BASE)
#define NVIC                        ((NVIC_Type*)              NVIC_BASE)
#define MPU                         ((MPU_Type*)               MPU_BASE)
#define STK                         ((STK_Type*)               STK_BASE)
#define SCB                         ((SCB_Type*)               SCB_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


#ifdef __cplusplus
}
#endif

#endif /* STM32L0X1_H */


/** @} */ /* End of group STM32L0x1 */

/** @} */ /* End of group  */
